// <auto-generated />
using System;
using CofiApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CofiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240919011147_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CofiApp.Domain.Authentication.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "All"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GetUsers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GetUserById"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CreateUser"
                        },
                        new
                        {
                            Id = 5,
                            Name = "UpdateUser"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RemoveUser"
                        },
                        new
                        {
                            Id = 7,
                            Name = "GetRoles"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CreateRole"
                        },
                        new
                        {
                            Id = 9,
                            Name = "UpdateRole"
                        },
                        new
                        {
                            Id = 10,
                            Name = "RemoveRole"
                        },
                        new
                        {
                            Id = 11,
                            Name = "GetRolesPermissions"
                        },
                        new
                        {
                            Id = 12,
                            Name = "AssignPermission"
                        },
                        new
                        {
                            Id = 13,
                            Name = "AssignUser"
                        },
                        new
                        {
                            Id = 14,
                            Name = "GetMenuCategories"
                        },
                        new
                        {
                            Id = 15,
                            Name = "GetMenuCategoryById"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CreateMenuCategory"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UpdateMenuCategory"
                        },
                        new
                        {
                            Id = 18,
                            Name = "RemoveMenuCategory"
                        },
                        new
                        {
                            Id = 19,
                            Name = "UpdateMenuCategoriesDisplayOrder"
                        },
                        new
                        {
                            Id = 20,
                            Name = "GetProducts"
                        },
                        new
                        {
                            Id = 21,
                            Name = "GetProductById"
                        },
                        new
                        {
                            Id = 22,
                            Name = "CreateProduct"
                        },
                        new
                        {
                            Id = 23,
                            Name = "UpdateProduct"
                        },
                        new
                        {
                            Id = 24,
                            Name = "RemoveProduct"
                        },
                        new
                        {
                            Id = 25,
                            Name = "UpdateProductMenuCategories"
                        },
                        new
                        {
                            Id = 26,
                            Name = "GetProductOptionGroupsWithOptions"
                        },
                        new
                        {
                            Id = 27,
                            Name = "CreateProductOptionGroup"
                        },
                        new
                        {
                            Id = 28,
                            Name = "UpdateProductOptionGroup"
                        },
                        new
                        {
                            Id = 29,
                            Name = "RemoveProductOptionGroup"
                        },
                        new
                        {
                            Id = 30,
                            Name = "CreateProductOption"
                        },
                        new
                        {
                            Id = 31,
                            Name = "UpdateProductOption"
                        },
                        new
                        {
                            Id = 32,
                            Name = "RemoveProductOption"
                        },
                        new
                        {
                            Id = 33,
                            Name = "GetActiveBasket"
                        },
                        new
                        {
                            Id = 34,
                            Name = "CreateBasketItem"
                        },
                        new
                        {
                            Id = 35,
                            Name = "UpdateBasketItem"
                        },
                        new
                        {
                            Id = 36,
                            Name = "UpdateBasketItemQuantity"
                        },
                        new
                        {
                            Id = 37,
                            Name = "ClearBasket"
                        },
                        new
                        {
                            Id = 38,
                            Name = "GetShopOrders"
                        },
                        new
                        {
                            Id = 39,
                            Name = "GetShopOrderById"
                        },
                        new
                        {
                            Id = 40,
                            Name = "CancelShopOrder"
                        },
                        new
                        {
                            Id = 41,
                            Name = "ProcessShopOrder"
                        },
                        new
                        {
                            Id = 42,
                            Name = "CompleteShopOrder"
                        },
                        new
                        {
                            Id = 43,
                            Name = "GetCustomerOrders"
                        },
                        new
                        {
                            Id = 44,
                            Name = "GetCustomerOrderById"
                        },
                        new
                        {
                            Id = 45,
                            Name = "CreateCustomerOrder"
                        },
                        new
                        {
                            Id = 46,
                            Name = "CancelCustomerOrder"
                        },
                        new
                        {
                            Id = 47,
                            Name = "UploadProductImageFile"
                        },
                        new
                        {
                            Id = 48,
                            Name = "RemoveProductImageFile"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac78158f-9853-4b13-b6a7-5014fc05ab86"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 150, DateTimeKind.Utc).AddTicks(2361),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("ac78158f-9853-4b13-b6a7-5014fc05ab86"),
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("1b171ff7-1bd9-4b5e-bf87-23117bb667a5"),
                            RoleId = new Guid("ac78158f-9853-4b13-b6a7-5014fc05ab86")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemId");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("BasketItemOptionGroups", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemOptionGroupId");

                    b.HasIndex("ProductOptionId");

                    b.ToTable("BasketItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Files", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f5643a9f-30ef-41b1-8e10-72fcbf867e0b"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9327),
                            DisplayOrder = 1,
                            Name = "Öne Çıkaranlar"
                        },
                        new
                        {
                            Id = new Guid("c1fea2aa-e375-42d5-a3b8-248c08b616f5"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9329),
                            DisplayOrder = 2,
                            Name = "Sıcak Kahveler"
                        },
                        new
                        {
                            Id = new Guid("23f2de07-47f2-406b-b4fd-b7b4e9d6e473"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9330),
                            DisplayOrder = 3,
                            Name = "Soğuk Kahveler"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProductOptionGroupAllowMultiple")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProductOptionGroupIsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ProductOptionGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemOptionGroups", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderItemOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductOptionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductOptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemOptionGroupId");

                    b.ToTable("OrderItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "MenuCategoryId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("ProductMenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("43d731fc-5a48-4dac-afc7-8b8da9343fd5"),
                            MenuCategoryId = new Guid("f5643a9f-30ef-41b1-8e10-72fcbf867e0b")
                        },
                        new
                        {
                            ProductId = new Guid("43d731fc-5a48-4dac-afc7-8b8da9343fd5"),
                            MenuCategoryId = new Guid("c1fea2aa-e375-42d5-a3b8-248c08b616f5")
                        },
                        new
                        {
                            ProductId = new Guid("f682b687-bcec-41aa-8b16-63e5af1f5fef"),
                            MenuCategoryId = new Guid("f5643a9f-30ef-41b1-8e10-72fcbf867e0b")
                        },
                        new
                        {
                            ProductId = new Guid("f682b687-bcec-41aa-8b16-63e5af1f5fef"),
                            MenuCategoryId = new Guid("c1fea2aa-e375-42d5-a3b8-248c08b616f5")
                        },
                        new
                        {
                            ProductId = new Guid("a42d9966-8b77-4e2d-9286-025406f0ae74"),
                            MenuCategoryId = new Guid("23f2de07-47f2-406b-b4fd-b7b4e9d6e473")
                        },
                        new
                        {
                            ProductId = new Guid("bd9e7c0b-5e5d-47f7-80cb-5ae28dbb6d2d"),
                            MenuCategoryId = new Guid("23f2de07-47f2-406b-b4fd-b7b4e9d6e473")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultiple")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e72f2e8-85da-4a9b-8453-066239412fce"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9467),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("43d731fc-5a48-4dac-afc7-8b8da9343fd5")
                        },
                        new
                        {
                            Id = new Guid("c533fa0e-8810-46ec-aafd-21b9c2a76312"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9468),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("f682b687-bcec-41aa-8b16-63e5af1f5fef")
                        },
                        new
                        {
                            Id = new Guid("7a992126-0a2a-4cd5-a9fb-acf5c1b1d1bd"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9469),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("bd9e7c0b-5e5d-47f7-80cb-5ae28dbb6d2d")
                        },
                        new
                        {
                            Id = new Guid("dbee91a8-882b-447a-9552-0d677503018c"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9471),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("a42d9966-8b77-4e2d-9286-025406f0ae74")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("ProductOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("32902b00-d2ab-42aa-af6d-5e29642b9b40"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9559),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("0e72f2e8-85da-4a9b-8453-066239412fce")
                        },
                        new
                        {
                            Id = new Guid("fa761f9e-91d9-4dec-96aa-9e2756c8033c"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9562),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("0e72f2e8-85da-4a9b-8453-066239412fce")
                        },
                        new
                        {
                            Id = new Guid("e43f45f1-5986-4b9a-b142-ca712480b322"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9563),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("0e72f2e8-85da-4a9b-8453-066239412fce")
                        },
                        new
                        {
                            Id = new Guid("7c8b384b-e2f7-41ae-a57b-c118bc560d53"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9564),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("c533fa0e-8810-46ec-aafd-21b9c2a76312")
                        },
                        new
                        {
                            Id = new Guid("d4dc1bc0-665a-4900-bc4d-41c298b5e940"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9566),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("c533fa0e-8810-46ec-aafd-21b9c2a76312")
                        },
                        new
                        {
                            Id = new Guid("89ac0a76-75eb-48cb-8f5f-3a86f66a6955"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9567),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("c533fa0e-8810-46ec-aafd-21b9c2a76312")
                        },
                        new
                        {
                            Id = new Guid("34f951d6-b0d3-453c-8e8e-bf953f5111f4"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9568),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("7a992126-0a2a-4cd5-a9fb-acf5c1b1d1bd")
                        },
                        new
                        {
                            Id = new Guid("262d1ce8-033c-44ca-80f5-72247290a9f9"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9569),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("7a992126-0a2a-4cd5-a9fb-acf5c1b1d1bd")
                        },
                        new
                        {
                            Id = new Guid("49e6579e-3a01-4a56-883b-e743a4b9b613"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9572),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("7a992126-0a2a-4cd5-a9fb-acf5c1b1d1bd")
                        },
                        new
                        {
                            Id = new Guid("aceec0ee-3c9e-410d-8f92-f99bde4a9aca"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9574),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("dbee91a8-882b-447a-9552-0d677503018c")
                        },
                        new
                        {
                            Id = new Guid("d07e026f-62d0-4ca7-a291-88111dde3fd5"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9575),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("dbee91a8-882b-447a-9552-0d677503018c")
                        },
                        new
                        {
                            Id = new Guid("d220a72d-159a-4d67-8641-de417f0fa3f2"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9577),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("dbee91a8-882b-447a-9552-0d677503018c")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductImageFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductImageFileId")
                        .IsUnique()
                        .HasFilter("[ProductImageFileId] IS NOT NULL");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("43d731fc-5a48-4dac-afc7-8b8da9343fd5"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9429),
                            Deleted = false,
                            Name = "Latte",
                            Price = 15m
                        },
                        new
                        {
                            Id = new Guid("f682b687-bcec-41aa-8b16-63e5af1f5fef"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9431),
                            Deleted = false,
                            Name = "Mocha",
                            Price = 20m
                        },
                        new
                        {
                            Id = new Guid("a42d9966-8b77-4e2d-9286-025406f0ae74"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9433),
                            Deleted = false,
                            Name = "Ice Americano",
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("bd9e7c0b-5e5d-47f7-80cb-5ae28dbb6d2d"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9434),
                            Deleted = false,
                            Name = "Ice Latte",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserVerificationTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b171ff7-1bd9-4b5e-bf87-23117bb667a5"),
                            CreatedOnUtc = new DateTime(2024, 9, 19, 1, 11, 47, 153, DateTimeKind.Utc).AddTicks(9194),
                            Deleted = false,
                            Email = "eneskrdnz28@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Enes",
                            LastName = "Karadeniz",
                            PasswordHash = "5BBD21B47C970917FE1F5E6CF7A86FE69BD63E69CFEB8F73BE788F9C49264C40-310FB5E7423D30B2D14DB1E339C6B309",
                            PhoneNumberConfirmed = false
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductImageFiles.ProductImageFile", b =>
                {
                    b.HasBaseType("CofiApp.Domain.Files.File");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("ProductImageFiles", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItems.BasketItem", "BasketItem")
                        .WithMany("BasketItemOptionGroups")
                        .HasForeignKey("BasketItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("BasketItemOptionGroups")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItem");

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", "BasketItemOptionGroup")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("BasketItemOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptions.ProductOption", "ProductOption")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItemOptionGroup");

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.OrderItems.OrderItem", "OrderItem")
                        .WithMany("OrderItemOptionGroups")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", "OrderItemOptionGroup")
                        .WithMany("OrderItemOptions")
                        .HasForeignKey("OrderItemOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItemOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("Orders")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.HasOne("CofiApp.Domain.MenuCategories.MenuCategory", "MenuCategory")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductOptionGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.HasOne("CofiApp.Domain.ProductImageFiles.ProductImageFile", "ProductImageFile")
                        .WithOne("Product")
                        .HasForeignKey("CofiApp.Domain.Products.Product", "ProductImageFileId");

                    b.Navigation("ProductImageFile");
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserVerificationToken")
                        .HasForeignKey("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductImageFiles.ProductImageFile", b =>
                {
                    b.HasOne("CofiApp.Domain.Files.File", null)
                        .WithOne()
                        .HasForeignKey("CofiApp.Domain.ProductImageFiles.ProductImageFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Navigation("BasketItemOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Navigation("ProductMenuCategories");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.Navigation("OrderItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Navigation("OrderItemOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Navigation("BasketItemOptionGroups");

                    b.Navigation("ProductOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("ProductMenuCategories");

                    b.Navigation("ProductOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");

                    b.Navigation("UserRefreshToken")
                        .IsRequired();

                    b.Navigation("UserVerificationToken")
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.ProductImageFiles.ProductImageFile", b =>
                {
                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
