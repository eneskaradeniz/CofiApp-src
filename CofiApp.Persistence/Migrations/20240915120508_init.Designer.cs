// <auto-generated />
using System;
using CofiApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CofiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240915120508_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CofiApp.Domain.Authentication.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "All"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GetUsers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GetUserById"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CreateUser"
                        },
                        new
                        {
                            Id = 5,
                            Name = "UpdateUser"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RemoveUser"
                        },
                        new
                        {
                            Id = 7,
                            Name = "GetRoles"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CreateRole"
                        },
                        new
                        {
                            Id = 9,
                            Name = "UpdateRole"
                        },
                        new
                        {
                            Id = 10,
                            Name = "RemoveRole"
                        },
                        new
                        {
                            Id = 11,
                            Name = "GetRolesPermissions"
                        },
                        new
                        {
                            Id = 12,
                            Name = "AssignPermission"
                        },
                        new
                        {
                            Id = 13,
                            Name = "AssignUser"
                        },
                        new
                        {
                            Id = 14,
                            Name = "GetMenuCategories"
                        },
                        new
                        {
                            Id = 15,
                            Name = "GetMenuCategoryById"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CreateMenuCategory"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UpdateMenuCategory"
                        },
                        new
                        {
                            Id = 18,
                            Name = "RemoveMenuCategory"
                        },
                        new
                        {
                            Id = 19,
                            Name = "GetProducts"
                        },
                        new
                        {
                            Id = 20,
                            Name = "GetProductById"
                        },
                        new
                        {
                            Id = 21,
                            Name = "CreateProduct"
                        },
                        new
                        {
                            Id = 22,
                            Name = "UpdateProduct"
                        },
                        new
                        {
                            Id = 23,
                            Name = "RemoveProduct"
                        },
                        new
                        {
                            Id = 24,
                            Name = "UpdateProductMenuCategories"
                        },
                        new
                        {
                            Id = 25,
                            Name = "GetProductOptionGroupsWithOptions"
                        },
                        new
                        {
                            Id = 26,
                            Name = "CreateProductOptionGroup"
                        },
                        new
                        {
                            Id = 27,
                            Name = "UpdateProductOptionGroup"
                        },
                        new
                        {
                            Id = 28,
                            Name = "RemoveProductOptionGroup"
                        },
                        new
                        {
                            Id = 29,
                            Name = "CreateProductOption"
                        },
                        new
                        {
                            Id = 30,
                            Name = "UpdateProductOption"
                        },
                        new
                        {
                            Id = 31,
                            Name = "RemoveProductOption"
                        },
                        new
                        {
                            Id = 32,
                            Name = "GetActiveBasket"
                        },
                        new
                        {
                            Id = 33,
                            Name = "CreateBasketItem"
                        },
                        new
                        {
                            Id = 34,
                            Name = "UpdateBasketItem"
                        },
                        new
                        {
                            Id = 35,
                            Name = "UpdateBasketItemQuantity"
                        },
                        new
                        {
                            Id = 36,
                            Name = "ClearBasket"
                        },
                        new
                        {
                            Id = 37,
                            Name = "GetShopOrders"
                        },
                        new
                        {
                            Id = 38,
                            Name = "GetShopOrderById"
                        },
                        new
                        {
                            Id = 39,
                            Name = "UpdateShopOrderStatus"
                        },
                        new
                        {
                            Id = 40,
                            Name = "GetCustomerOrders"
                        },
                        new
                        {
                            Id = 41,
                            Name = "GetCustomerOrderById"
                        },
                        new
                        {
                            Id = 42,
                            Name = "CreateCustomerOrder"
                        },
                        new
                        {
                            Id = 43,
                            Name = "CancelCustomerOrder"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c323a58-da8d-407e-a4d8-9ea3d15d66b4"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 4, DateTimeKind.Utc).AddTicks(1778),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("2c323a58-da8d-407e-a4d8-9ea3d15d66b4"),
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("676fb5db-8315-4592-a06e-ab9720e53aa5"),
                            RoleId = new Guid("2c323a58-da8d-407e-a4d8-9ea3d15d66b4")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemId");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("BasketItemOptionGroups", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemOptionGroupId");

                    b.HasIndex("ProductOptionId");

                    b.ToTable("BasketItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2df5d81-e7d9-401d-818f-90dd73d23745"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(8998),
                            Name = "Öne Çıkaranlar"
                        },
                        new
                        {
                            Id = new Guid("4e7aa678-4b40-46d9-8027-7cf07c0c4592"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9000),
                            Name = "Sıcak Kahveler"
                        },
                        new
                        {
                            Id = new Guid("e85a32df-ed18-4577-b90e-8a61d60b9238"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9001),
                            Name = "Soğuk Kahveler"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProductOptionGroupAllowMultiple")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProductOptionGroupIsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ProductOptionGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemOptionGroups", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderItemOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductOptionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductOptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemOptionGroupId");

                    b.ToTable("OrderItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "MenuCategoryId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("ProductMenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("9fc0883a-bf2d-496c-a74b-2479d12c3f1f"),
                            MenuCategoryId = new Guid("f2df5d81-e7d9-401d-818f-90dd73d23745")
                        },
                        new
                        {
                            ProductId = new Guid("9fc0883a-bf2d-496c-a74b-2479d12c3f1f"),
                            MenuCategoryId = new Guid("4e7aa678-4b40-46d9-8027-7cf07c0c4592")
                        },
                        new
                        {
                            ProductId = new Guid("d57f1c2e-343b-4608-b9fb-1886cee23d9b"),
                            MenuCategoryId = new Guid("f2df5d81-e7d9-401d-818f-90dd73d23745")
                        },
                        new
                        {
                            ProductId = new Guid("d57f1c2e-343b-4608-b9fb-1886cee23d9b"),
                            MenuCategoryId = new Guid("4e7aa678-4b40-46d9-8027-7cf07c0c4592")
                        },
                        new
                        {
                            ProductId = new Guid("d4cf9f27-b26a-4505-8778-ad2c542cc79c"),
                            MenuCategoryId = new Guid("e85a32df-ed18-4577-b90e-8a61d60b9238")
                        },
                        new
                        {
                            ProductId = new Guid("b173d0c5-4dd6-4549-824f-9be3373e6adb"),
                            MenuCategoryId = new Guid("e85a32df-ed18-4577-b90e-8a61d60b9238")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultiple")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7381447f-0880-4891-bb6e-281624d27818"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9085),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("9fc0883a-bf2d-496c-a74b-2479d12c3f1f")
                        },
                        new
                        {
                            Id = new Guid("6d648357-b733-4882-b1a7-1a97ac543b3d"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9088),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("d57f1c2e-343b-4608-b9fb-1886cee23d9b")
                        },
                        new
                        {
                            Id = new Guid("08dd8ba5-2c42-414c-bd30-42abb832d2e6"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9090),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("b173d0c5-4dd6-4549-824f-9be3373e6adb")
                        },
                        new
                        {
                            Id = new Guid("841154da-db07-4f75-9fa5-8ca2d5070cf9"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9091),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("d4cf9f27-b26a-4505-8778-ad2c542cc79c")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("ProductOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("61b3677e-187f-4d37-9c13-2477302d4410"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9119),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("7381447f-0880-4891-bb6e-281624d27818")
                        },
                        new
                        {
                            Id = new Guid("906b6099-2309-498d-86b7-1c30aca1518a"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9121),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("7381447f-0880-4891-bb6e-281624d27818")
                        },
                        new
                        {
                            Id = new Guid("8394efbc-ec9a-4ae4-8f0a-752304966dc6"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9122),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("7381447f-0880-4891-bb6e-281624d27818")
                        },
                        new
                        {
                            Id = new Guid("29d141f4-8877-4c1e-82dd-4019bbbbdf91"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9124),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("6d648357-b733-4882-b1a7-1a97ac543b3d")
                        },
                        new
                        {
                            Id = new Guid("771f2cce-e875-41f5-91cf-ad4ca73f9a1e"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9127),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("6d648357-b733-4882-b1a7-1a97ac543b3d")
                        },
                        new
                        {
                            Id = new Guid("816c45ce-1f9f-43a1-8be7-8249cef1d761"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9128),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("6d648357-b733-4882-b1a7-1a97ac543b3d")
                        },
                        new
                        {
                            Id = new Guid("cf71a397-1dcb-4609-90c5-3bea3e37b2ff"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9129),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("08dd8ba5-2c42-414c-bd30-42abb832d2e6")
                        },
                        new
                        {
                            Id = new Guid("5a1b873d-3dc7-4174-9021-bd677b0af437"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9130),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("08dd8ba5-2c42-414c-bd30-42abb832d2e6")
                        },
                        new
                        {
                            Id = new Guid("454dcac1-227d-4361-bd5d-cc695bc8930c"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9131),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("08dd8ba5-2c42-414c-bd30-42abb832d2e6")
                        },
                        new
                        {
                            Id = new Guid("f984402f-33b3-4fb2-b5b8-473bba0ac7be"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9133),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("841154da-db07-4f75-9fa5-8ca2d5070cf9")
                        },
                        new
                        {
                            Id = new Guid("e891e902-e9a3-4db8-8bac-280b5f6912ae"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9134),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("841154da-db07-4f75-9fa5-8ca2d5070cf9")
                        },
                        new
                        {
                            Id = new Guid("1d84823f-556e-4587-92e5-40abb356b154"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9135),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("841154da-db07-4f75-9fa5-8ca2d5070cf9")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fc0883a-bf2d-496c-a74b-2479d12c3f1f"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9040),
                            Deleted = false,
                            Name = "Latte",
                            Price = 15m
                        },
                        new
                        {
                            Id = new Guid("d57f1c2e-343b-4608-b9fb-1886cee23d9b"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9042),
                            Deleted = false,
                            Name = "Mocha",
                            Price = 20m
                        },
                        new
                        {
                            Id = new Guid("d4cf9f27-b26a-4505-8778-ad2c542cc79c"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9044),
                            Deleted = false,
                            Name = "Ice Americano",
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("b173d0c5-4dd6-4549-824f-9be3373e6adb"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(9045),
                            Deleted = false,
                            Name = "Ice Latte",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserVerificationTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("676fb5db-8315-4592-a06e-ab9720e53aa5"),
                            CreatedOnUtc = new DateTime(2024, 9, 15, 12, 5, 8, 7, DateTimeKind.Utc).AddTicks(8808),
                            Deleted = false,
                            Email = "eneskrdnz28@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Enes",
                            LastName = "Karadeniz",
                            PasswordHash = "74B4CF32C649297FD6CE091B6F3F59A83CDD85C718D956B312A590C14D40E20E-86140FFF7D68BE64025CC224D03C1BFB",
                            PhoneNumberConfirmed = false
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItems.BasketItem", "BasketItem")
                        .WithMany("BasketItemOptionGroups")
                        .HasForeignKey("BasketItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("BasketItemOptionGroups")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItem");

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", "BasketItemOptionGroup")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("BasketItemOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptions.ProductOption", "ProductOption")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItemOptionGroup");

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.OrderItems.OrderItem", "OrderItem")
                        .WithMany("OrderItemOptionGroups")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", "OrderItemOptionGroup")
                        .WithMany("OrderItemOptions")
                        .HasForeignKey("OrderItemOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItemOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("Orders")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.HasOne("CofiApp.Domain.MenuCategories.MenuCategory", "MenuCategory")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductOptionGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserVerificationToken")
                        .HasForeignKey("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Navigation("BasketItemOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Navigation("ProductMenuCategories");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.Navigation("OrderItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Navigation("OrderItemOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Navigation("BasketItemOptionGroups");

                    b.Navigation("ProductOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("ProductMenuCategories");

                    b.Navigation("ProductOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");

                    b.Navigation("UserRefreshToken")
                        .IsRequired();

                    b.Navigation("UserVerificationToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
