// <auto-generated />
using System;
using CofiApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CofiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CofiApp.Domain.Authentication.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "All"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GetUsers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GetUserById"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CreateUser"
                        },
                        new
                        {
                            Id = 5,
                            Name = "UpdateUser"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RemoveUser"
                        },
                        new
                        {
                            Id = 7,
                            Name = "GetRoles"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CreateRole"
                        },
                        new
                        {
                            Id = 9,
                            Name = "UpdateRole"
                        },
                        new
                        {
                            Id = 10,
                            Name = "RemoveRole"
                        },
                        new
                        {
                            Id = 11,
                            Name = "GetRolesPermissions"
                        },
                        new
                        {
                            Id = 12,
                            Name = "AssignPermission"
                        },
                        new
                        {
                            Id = 13,
                            Name = "AssignUser"
                        },
                        new
                        {
                            Id = 14,
                            Name = "GetMenuCategories"
                        },
                        new
                        {
                            Id = 15,
                            Name = "GetMenuCategoryById"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CreateMenuCategory"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UpdateMenuCategory"
                        },
                        new
                        {
                            Id = 18,
                            Name = "RemoveMenuCategory"
                        },
                        new
                        {
                            Id = 19,
                            Name = "GetProducts"
                        },
                        new
                        {
                            Id = 20,
                            Name = "GetProductById"
                        },
                        new
                        {
                            Id = 21,
                            Name = "CreateProduct"
                        },
                        new
                        {
                            Id = 22,
                            Name = "UpdateProduct"
                        },
                        new
                        {
                            Id = 23,
                            Name = "RemoveProduct"
                        },
                        new
                        {
                            Id = 24,
                            Name = "UpdateProductMenuCategories"
                        },
                        new
                        {
                            Id = 25,
                            Name = "GetProductOptionGroupsWithOptions"
                        },
                        new
                        {
                            Id = 26,
                            Name = "CreateProductOptionGroup"
                        },
                        new
                        {
                            Id = 27,
                            Name = "UpdateProductOptionGroup"
                        },
                        new
                        {
                            Id = 28,
                            Name = "RemoveProductOptionGroup"
                        },
                        new
                        {
                            Id = 29,
                            Name = "CreateProductOption"
                        },
                        new
                        {
                            Id = 30,
                            Name = "UpdateProductOption"
                        },
                        new
                        {
                            Id = 31,
                            Name = "RemoveProductOption"
                        },
                        new
                        {
                            Id = 32,
                            Name = "GetActiveBasketByUser"
                        },
                        new
                        {
                            Id = 33,
                            Name = "CreateBasketItem"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b77d3c0-2886-4296-8e22-402d3c5c8e93"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 507, DateTimeKind.Utc).AddTicks(2018),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("8b77d3c0-2886-4296-8e22-402d3c5c8e93"),
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("87c9272e-2046-470d-9ce5-9d32fd9fcc06"),
                            RoleId = new Guid("8b77d3c0-2886-4296-8e22-402d3c5c8e93")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemId");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("BasketItemOptionGroups", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemOptionGroupId");

                    b.HasIndex("ProductOptionId");

                    b.ToTable("BasketItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ced96f4-16b6-42fe-9834-c43c4a9a45f3"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8876),
                            Name = "Öne Çıkaranlar"
                        },
                        new
                        {
                            Id = new Guid("a6270d62-e249-4950-9149-73a23c6a0794"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8886),
                            Name = "Sıcak Kahveler"
                        },
                        new
                        {
                            Id = new Guid("bee109d8-b4eb-446f-855b-ea45d2ff279b"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8887),
                            Name = "Soğuk Kahveler"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductOptionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductOptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "MenuCategoryId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("ProductMenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("ce91c203-e70f-48ad-a42d-44451bc3b1bb"),
                            MenuCategoryId = new Guid("3ced96f4-16b6-42fe-9834-c43c4a9a45f3")
                        },
                        new
                        {
                            ProductId = new Guid("ce91c203-e70f-48ad-a42d-44451bc3b1bb"),
                            MenuCategoryId = new Guid("a6270d62-e249-4950-9149-73a23c6a0794")
                        },
                        new
                        {
                            ProductId = new Guid("89460128-431a-402a-af93-a99bda22a2b5"),
                            MenuCategoryId = new Guid("3ced96f4-16b6-42fe-9834-c43c4a9a45f3")
                        },
                        new
                        {
                            ProductId = new Guid("89460128-431a-402a-af93-a99bda22a2b5"),
                            MenuCategoryId = new Guid("a6270d62-e249-4950-9149-73a23c6a0794")
                        },
                        new
                        {
                            ProductId = new Guid("acb90efa-e40a-4be1-9fac-4f3e597d260f"),
                            MenuCategoryId = new Guid("bee109d8-b4eb-446f-855b-ea45d2ff279b")
                        },
                        new
                        {
                            ProductId = new Guid("39c73dda-4b0a-4bae-b801-2cc36a980a54"),
                            MenuCategoryId = new Guid("bee109d8-b4eb-446f-855b-ea45d2ff279b")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultiple")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6e0b55db-2b02-4500-8ef6-fa6d294e8821"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8952),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("ce91c203-e70f-48ad-a42d-44451bc3b1bb")
                        },
                        new
                        {
                            Id = new Guid("59f87686-122e-4095-a58a-26caea726ee1"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8953),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("89460128-431a-402a-af93-a99bda22a2b5")
                        },
                        new
                        {
                            Id = new Guid("f39d399e-7233-445f-bd87-328acb055387"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8956),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("39c73dda-4b0a-4bae-b801-2cc36a980a54")
                        },
                        new
                        {
                            Id = new Guid("a811c569-e7a9-43ad-8624-50e8e2b3b4b1"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8958),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("acb90efa-e40a-4be1-9fac-4f3e597d260f")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("ProductOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("840709df-e884-4cd6-979e-fff71a8e7180"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8987),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("6e0b55db-2b02-4500-8ef6-fa6d294e8821")
                        },
                        new
                        {
                            Id = new Guid("15557090-2056-42a1-b02d-0c88dec78ac0"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8990),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("6e0b55db-2b02-4500-8ef6-fa6d294e8821")
                        },
                        new
                        {
                            Id = new Guid("d2fca26d-e4cf-415c-a157-97d2824681b3"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8991),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("6e0b55db-2b02-4500-8ef6-fa6d294e8821")
                        },
                        new
                        {
                            Id = new Guid("61de6614-ba08-466f-9bfe-02f04c94fcf1"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8993),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("59f87686-122e-4095-a58a-26caea726ee1")
                        },
                        new
                        {
                            Id = new Guid("2b1cb234-0c24-4226-af7f-4395ac387775"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8994),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("59f87686-122e-4095-a58a-26caea726ee1")
                        },
                        new
                        {
                            Id = new Guid("5b89316a-4df4-48c1-8745-a9427ca9af86"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8995),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("59f87686-122e-4095-a58a-26caea726ee1")
                        },
                        new
                        {
                            Id = new Guid("255f050f-b503-44e0-8cd8-6975ff1572f9"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8998),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("f39d399e-7233-445f-bd87-328acb055387")
                        },
                        new
                        {
                            Id = new Guid("22bbeb5b-da8f-4558-9ccb-4ea98ae949d0"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8999),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("f39d399e-7233-445f-bd87-328acb055387")
                        },
                        new
                        {
                            Id = new Guid("d0459463-dd7f-4816-8327-c47a08eaf6a7"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(9000),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("f39d399e-7233-445f-bd87-328acb055387")
                        },
                        new
                        {
                            Id = new Guid("16c12caa-d4b6-438d-ba31-3bd76780a008"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(9001),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("a811c569-e7a9-43ad-8624-50e8e2b3b4b1")
                        },
                        new
                        {
                            Id = new Guid("9512b611-fad8-43d1-80b5-12568ed4fe20"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(9002),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("a811c569-e7a9-43ad-8624-50e8e2b3b4b1")
                        },
                        new
                        {
                            Id = new Guid("933f3898-9b65-43e3-9384-a7ab4218d370"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(9003),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("a811c569-e7a9-43ad-8624-50e8e2b3b4b1")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce91c203-e70f-48ad-a42d-44451bc3b1bb"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8921),
                            Deleted = false,
                            Name = "Latte",
                            Price = 15m
                        },
                        new
                        {
                            Id = new Guid("89460128-431a-402a-af93-a99bda22a2b5"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8923),
                            Deleted = false,
                            Name = "Mocha",
                            Price = 20m
                        },
                        new
                        {
                            Id = new Guid("acb90efa-e40a-4be1-9fac-4f3e597d260f"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8924),
                            Deleted = false,
                            Name = "Ice Americano",
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("39c73dda-4b0a-4bae-b801-2cc36a980a54"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8925),
                            Deleted = false,
                            Name = "Ice Latte",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserVerificationTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("87c9272e-2046-470d-9ce5-9d32fd9fcc06"),
                            CreatedOnUtc = new DateTime(2024, 9, 13, 22, 17, 59, 510, DateTimeKind.Utc).AddTicks(8708),
                            Deleted = false,
                            Email = "eneskrdnz28@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Enes",
                            LastName = "Karadeniz",
                            PasswordHash = "9A5466A4F194CD39813C886BFB59F6AF35FCB22AD76B12A1572C2C02D989B8EB-582BB6949CA31B538FAC47ABE7B804FB",
                            PhoneNumberConfirmed = false
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItems.BasketItem", "BasketItem")
                        .WithMany("BasketItemOptionGroups")
                        .HasForeignKey("BasketItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("BasketItemOptionGroups")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItem");

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", "BasketItemOptionGroup")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("BasketItemOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptions.ProductOption", "ProductOption")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItemOptionGroup");

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.OrderItems.OrderItem", "OrderItem")
                        .WithMany("OrderItemOptions")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("Orders")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.HasOne("CofiApp.Domain.MenuCategories.MenuCategory", "MenuCategory")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductOptionGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserVerificationToken")
                        .HasForeignKey("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Navigation("BasketItemOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Navigation("ProductMenuCategories");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Navigation("OrderItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Navigation("BasketItemOptionGroups");

                    b.Navigation("ProductOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("ProductMenuCategories");

                    b.Navigation("ProductOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");

                    b.Navigation("UserRefreshToken")
                        .IsRequired();

                    b.Navigation("UserVerificationToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
