// <auto-generated />
using System;
using CofiApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CofiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CofiApp.Domain.Authentication.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "All"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GetUsers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GetUserById"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CreateUser"
                        },
                        new
                        {
                            Id = 5,
                            Name = "UpdateUser"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RemoveUser"
                        },
                        new
                        {
                            Id = 7,
                            Name = "GetRoles"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CreateRole"
                        },
                        new
                        {
                            Id = 9,
                            Name = "UpdateRole"
                        },
                        new
                        {
                            Id = 10,
                            Name = "RemoveRole"
                        },
                        new
                        {
                            Id = 11,
                            Name = "GetRolesPermissions"
                        },
                        new
                        {
                            Id = 12,
                            Name = "AssignPermission"
                        },
                        new
                        {
                            Id = 13,
                            Name = "AssignUser"
                        },
                        new
                        {
                            Id = 14,
                            Name = "GetMenuCategories"
                        },
                        new
                        {
                            Id = 15,
                            Name = "GetMenuCategoryById"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CreateMenuCategory"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UpdateMenuCategory"
                        },
                        new
                        {
                            Id = 18,
                            Name = "RemoveMenuCategory"
                        },
                        new
                        {
                            Id = 19,
                            Name = "UpdateMenuCategoriesDisplayOrder"
                        },
                        new
                        {
                            Id = 20,
                            Name = "GetProducts"
                        },
                        new
                        {
                            Id = 21,
                            Name = "GetProductById"
                        },
                        new
                        {
                            Id = 22,
                            Name = "CreateProduct"
                        },
                        new
                        {
                            Id = 23,
                            Name = "UpdateProduct"
                        },
                        new
                        {
                            Id = 24,
                            Name = "RemoveProduct"
                        },
                        new
                        {
                            Id = 25,
                            Name = "UpdateProductMenuCategories"
                        },
                        new
                        {
                            Id = 26,
                            Name = "GetProductOptionGroupsWithOptions"
                        },
                        new
                        {
                            Id = 27,
                            Name = "CreateProductOptionGroup"
                        },
                        new
                        {
                            Id = 28,
                            Name = "UpdateProductOptionGroup"
                        },
                        new
                        {
                            Id = 29,
                            Name = "RemoveProductOptionGroup"
                        },
                        new
                        {
                            Id = 30,
                            Name = "CreateProductOption"
                        },
                        new
                        {
                            Id = 31,
                            Name = "UpdateProductOption"
                        },
                        new
                        {
                            Id = 32,
                            Name = "RemoveProductOption"
                        },
                        new
                        {
                            Id = 33,
                            Name = "GetActiveBasket"
                        },
                        new
                        {
                            Id = 34,
                            Name = "CreateBasketItem"
                        },
                        new
                        {
                            Id = 35,
                            Name = "UpdateBasketItem"
                        },
                        new
                        {
                            Id = 36,
                            Name = "UpdateBasketItemQuantity"
                        },
                        new
                        {
                            Id = 37,
                            Name = "ClearBasket"
                        },
                        new
                        {
                            Id = 38,
                            Name = "GetShopOrders"
                        },
                        new
                        {
                            Id = 39,
                            Name = "GetShopOrderById"
                        },
                        new
                        {
                            Id = 40,
                            Name = "UpdateShopOrderStatus"
                        },
                        new
                        {
                            Id = 41,
                            Name = "GetCustomerOrders"
                        },
                        new
                        {
                            Id = 42,
                            Name = "GetCustomerOrderById"
                        },
                        new
                        {
                            Id = 43,
                            Name = "CreateCustomerOrder"
                        },
                        new
                        {
                            Id = 44,
                            Name = "CancelCustomerOrder"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7478f32f-75b9-4f61-8141-1343f1f2957e"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 704, DateTimeKind.Utc).AddTicks(6123),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("7478f32f-75b9-4f61-8141-1343f1f2957e"),
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("911cb4e8-997e-4dfd-a85b-c8e91cd6fca9"),
                            RoleId = new Guid("7478f32f-75b9-4f61-8141-1343f1f2957e")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemId");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("BasketItemOptionGroups", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemOptionGroupId");

                    b.HasIndex("ProductOptionId");

                    b.ToTable("BasketItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d961f13-b7a7-4d79-a863-6331d5eb3f65"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5738),
                            DisplayOrder = 1,
                            Name = "Öne Çıkaranlar"
                        },
                        new
                        {
                            Id = new Guid("0b75f0a3-a098-49aa-8f2f-67894aaaaa17"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5741),
                            DisplayOrder = 2,
                            Name = "Sıcak Kahveler"
                        },
                        new
                        {
                            Id = new Guid("1a0c9d85-9a56-4e70-be81-6037407e4987"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5751),
                            DisplayOrder = 3,
                            Name = "Soğuk Kahveler"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProductOptionGroupAllowMultiple")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProductOptionGroupIsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ProductOptionGroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemOptionGroups", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderItemOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductOptionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductOptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemOptionGroupId");

                    b.ToTable("OrderItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "MenuCategoryId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("ProductMenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("29d5ad9f-1a84-44a2-b7cf-59b9b8c6ad18"),
                            MenuCategoryId = new Guid("2d961f13-b7a7-4d79-a863-6331d5eb3f65")
                        },
                        new
                        {
                            ProductId = new Guid("29d5ad9f-1a84-44a2-b7cf-59b9b8c6ad18"),
                            MenuCategoryId = new Guid("0b75f0a3-a098-49aa-8f2f-67894aaaaa17")
                        },
                        new
                        {
                            ProductId = new Guid("936024fc-d24e-41da-8a05-16302b162ff0"),
                            MenuCategoryId = new Guid("2d961f13-b7a7-4d79-a863-6331d5eb3f65")
                        },
                        new
                        {
                            ProductId = new Guid("936024fc-d24e-41da-8a05-16302b162ff0"),
                            MenuCategoryId = new Guid("0b75f0a3-a098-49aa-8f2f-67894aaaaa17")
                        },
                        new
                        {
                            ProductId = new Guid("563e0732-83e9-4715-9b37-ea4d7526758d"),
                            MenuCategoryId = new Guid("1a0c9d85-9a56-4e70-be81-6037407e4987")
                        },
                        new
                        {
                            ProductId = new Guid("1e7aea90-f574-4c9f-813f-fea47f22433c"),
                            MenuCategoryId = new Guid("1a0c9d85-9a56-4e70-be81-6037407e4987")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultiple")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c75965d-1977-4449-98be-6ce8fdd4e1d9"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5900),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("29d5ad9f-1a84-44a2-b7cf-59b9b8c6ad18")
                        },
                        new
                        {
                            Id = new Guid("8fad5075-71f4-48ad-bf0e-3a2de9b975b6"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5903),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("936024fc-d24e-41da-8a05-16302b162ff0")
                        },
                        new
                        {
                            Id = new Guid("51a4a541-5c99-45d4-9d32-72a6e92442b0"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5904),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("1e7aea90-f574-4c9f-813f-fea47f22433c")
                        },
                        new
                        {
                            Id = new Guid("f3bb791e-b1a0-4f0b-96a3-8c9dc70e12d1"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5908),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("563e0732-83e9-4715-9b37-ea4d7526758d")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("ProductOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9458cfc0-f4b0-4245-bc6a-767b69a2b35e"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5940),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("4c75965d-1977-4449-98be-6ce8fdd4e1d9")
                        },
                        new
                        {
                            Id = new Guid("41823911-7c34-4558-b339-8193f61a82ad"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5941),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("4c75965d-1977-4449-98be-6ce8fdd4e1d9")
                        },
                        new
                        {
                            Id = new Guid("aa96cdb2-bacb-4a7e-9d0a-f2261c33492e"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5942),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("4c75965d-1977-4449-98be-6ce8fdd4e1d9")
                        },
                        new
                        {
                            Id = new Guid("34b4e723-ffec-4e0e-aadf-6c9f8cde8d98"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5944),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("8fad5075-71f4-48ad-bf0e-3a2de9b975b6")
                        },
                        new
                        {
                            Id = new Guid("6c012c11-b8f3-47cb-865d-2a3371f2a1f6"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5945),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("8fad5075-71f4-48ad-bf0e-3a2de9b975b6")
                        },
                        new
                        {
                            Id = new Guid("2d7c3095-d013-44fd-a97c-ef5bc3e82242"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5946),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("8fad5075-71f4-48ad-bf0e-3a2de9b975b6")
                        },
                        new
                        {
                            Id = new Guid("7d70ac35-97b6-46a8-891a-0cec1d6ba5f7"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5947),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("51a4a541-5c99-45d4-9d32-72a6e92442b0")
                        },
                        new
                        {
                            Id = new Guid("a476f05f-46a3-4f4f-bfe9-c887c6ce1c71"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5950),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("51a4a541-5c99-45d4-9d32-72a6e92442b0")
                        },
                        new
                        {
                            Id = new Guid("8d591048-d156-4f8d-a1ae-3afb2ecbb3d5"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5951),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("51a4a541-5c99-45d4-9d32-72a6e92442b0")
                        },
                        new
                        {
                            Id = new Guid("cd13ad25-73d1-4e5a-be42-357bcfacf42a"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5953),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("f3bb791e-b1a0-4f0b-96a3-8c9dc70e12d1")
                        },
                        new
                        {
                            Id = new Guid("5c495d37-3078-45fe-a30f-544ecb3447b2"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5954),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("f3bb791e-b1a0-4f0b-96a3-8c9dc70e12d1")
                        },
                        new
                        {
                            Id = new Guid("3c1b7d64-169d-4c6d-b773-59d4ecabea96"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5955),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("f3bb791e-b1a0-4f0b-96a3-8c9dc70e12d1")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("29d5ad9f-1a84-44a2-b7cf-59b9b8c6ad18"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5790),
                            Deleted = false,
                            Name = "Latte",
                            Price = 15m
                        },
                        new
                        {
                            Id = new Guid("936024fc-d24e-41da-8a05-16302b162ff0"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5793),
                            Deleted = false,
                            Name = "Mocha",
                            Price = 20m
                        },
                        new
                        {
                            Id = new Guid("563e0732-83e9-4715-9b37-ea4d7526758d"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5794),
                            Deleted = false,
                            Name = "Ice Americano",
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("1e7aea90-f574-4c9f-813f-fea47f22433c"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5795),
                            Deleted = false,
                            Name = "Ice Latte",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserVerificationTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("911cb4e8-997e-4dfd-a85b-c8e91cd6fca9"),
                            CreatedOnUtc = new DateTime(2024, 9, 16, 12, 40, 40, 708, DateTimeKind.Utc).AddTicks(5479),
                            Deleted = false,
                            Email = "eneskrdnz28@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Enes",
                            LastName = "Karadeniz",
                            PasswordHash = "2989900E22F3B2EB5E62412E941CF157B914B0EE866C39A9D1B8C92825FE1DA1-3DEFFE92324E874ACC59122A1D44D366",
                            PhoneNumberConfirmed = false
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItems.BasketItem", "BasketItem")
                        .WithMany("BasketItemOptionGroups")
                        .HasForeignKey("BasketItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("BasketItemOptionGroups")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItem");

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", "BasketItemOptionGroup")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("BasketItemOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptions.ProductOption", "ProductOption")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItemOptionGroup");

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.OrderItems.OrderItem", "OrderItem")
                        .WithMany("OrderItemOptionGroups")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", "OrderItemOptionGroup")
                        .WithMany("OrderItemOptions")
                        .HasForeignKey("OrderItemOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItemOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("Orders")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.HasOne("CofiApp.Domain.MenuCategories.MenuCategory", "MenuCategory")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductOptionGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserVerificationToken")
                        .HasForeignKey("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptionGroups.BasketItemOptionGroup", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Navigation("BasketItemOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Navigation("ProductMenuCategories");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptionGroups.OrderItemOptionGroup", b =>
                {
                    b.Navigation("OrderItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Navigation("OrderItemOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Navigation("BasketItemOptionGroups");

                    b.Navigation("ProductOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("ProductMenuCategories");

                    b.Navigation("ProductOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");

                    b.Navigation("UserRefreshToken")
                        .IsRequired();

                    b.Navigation("UserVerificationToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
