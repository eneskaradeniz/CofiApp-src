// <auto-generated />
using System;
using CofiApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CofiApp.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240911233446_update-seed-data")]
    partial class updateseeddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CofiApp.Domain.Authentication.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "All"
                        },
                        new
                        {
                            Id = 2,
                            Name = "GetUsers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "GetUserById"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CreateUser"
                        },
                        new
                        {
                            Id = 5,
                            Name = "UpdateUser"
                        },
                        new
                        {
                            Id = 6,
                            Name = "RemoveUser"
                        },
                        new
                        {
                            Id = 7,
                            Name = "GetRoles"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CreateRole"
                        },
                        new
                        {
                            Id = 9,
                            Name = "UpdateRole"
                        },
                        new
                        {
                            Id = 10,
                            Name = "RemoveRole"
                        },
                        new
                        {
                            Id = 11,
                            Name = "GetRolesPermissions"
                        },
                        new
                        {
                            Id = 12,
                            Name = "AssignPermission"
                        },
                        new
                        {
                            Id = 13,
                            Name = "AssignUser"
                        },
                        new
                        {
                            Id = 14,
                            Name = "GetMenuCategories"
                        },
                        new
                        {
                            Id = 15,
                            Name = "GetMenuCategoryById"
                        },
                        new
                        {
                            Id = 16,
                            Name = "CreateMenuCategory"
                        },
                        new
                        {
                            Id = 17,
                            Name = "UpdateMenuCategory"
                        },
                        new
                        {
                            Id = 18,
                            Name = "RemoveMenuCategory"
                        },
                        new
                        {
                            Id = 19,
                            Name = "GetProducts"
                        },
                        new
                        {
                            Id = 20,
                            Name = "GetProductById"
                        },
                        new
                        {
                            Id = 21,
                            Name = "CreateProduct"
                        },
                        new
                        {
                            Id = 22,
                            Name = "UpdateProduct"
                        },
                        new
                        {
                            Id = 23,
                            Name = "RemoveProduct"
                        },
                        new
                        {
                            Id = 24,
                            Name = "UpdateProductMenuCategories"
                        },
                        new
                        {
                            Id = 25,
                            Name = "GetProductOptionGroupsWithOptions"
                        },
                        new
                        {
                            Id = 26,
                            Name = "CreateProductOptionGroup"
                        },
                        new
                        {
                            Id = 27,
                            Name = "UpdateProductOptionGroup"
                        },
                        new
                        {
                            Id = 28,
                            Name = "RemoveProductOptionGroup"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c617d943-3587-4dbc-a808-0dd40649cbda"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 714, DateTimeKind.Utc).AddTicks(7422),
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("c617d943-3587-4dbc-a808-0dd40649cbda"),
                            PermissionId = 1
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("4e1fe578-d637-48e3-85b9-aed06dceb7d3"),
                            RoleId = new Guid("c617d943-3587-4dbc-a808-0dd40649cbda")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketItemId");

                    b.HasIndex("ProductOptionId");

                    b.ToTable("BasketItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("MenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d98413c-318a-4090-a4bd-d5e9b8d121f9"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6370),
                            Name = "Öne Çıkaranlar"
                        },
                        new
                        {
                            Id = new Guid("42a04f74-89a4-4bd0-84d8-58fd46b33174"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6371),
                            Name = "Sıcak Kahveler"
                        },
                        new
                        {
                            Id = new Guid("499e3a63-c35b-4f75-a54e-033ea920d720"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6372),
                            Name = "Soğuk Kahveler"
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductOptionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductOptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemOptions", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "MenuCategoryId");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("ProductMenuCategories", (string)null);

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("04f7281b-7032-4f16-b96a-336462a95fcc"),
                            MenuCategoryId = new Guid("8d98413c-318a-4090-a4bd-d5e9b8d121f9")
                        },
                        new
                        {
                            ProductId = new Guid("04f7281b-7032-4f16-b96a-336462a95fcc"),
                            MenuCategoryId = new Guid("42a04f74-89a4-4bd0-84d8-58fd46b33174")
                        },
                        new
                        {
                            ProductId = new Guid("8ba3cc24-0ba2-49aa-b27b-4b36d3b0b830"),
                            MenuCategoryId = new Guid("8d98413c-318a-4090-a4bd-d5e9b8d121f9")
                        },
                        new
                        {
                            ProductId = new Guid("8ba3cc24-0ba2-49aa-b27b-4b36d3b0b830"),
                            MenuCategoryId = new Guid("42a04f74-89a4-4bd0-84d8-58fd46b33174")
                        },
                        new
                        {
                            ProductId = new Guid("67cdabd3-e8af-4d4e-82ad-28f6c1f8ed64"),
                            MenuCategoryId = new Guid("499e3a63-c35b-4f75-a54e-033ea920d720")
                        },
                        new
                        {
                            ProductId = new Guid("a4726fae-db8f-4640-8e9e-b92613ce9313"),
                            MenuCategoryId = new Guid("499e3a63-c35b-4f75-a54e-033ea920d720")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowMultiple")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOptionGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae7f6c29-0733-49a9-9afa-5b383fd86c46"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6466),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("04f7281b-7032-4f16-b96a-336462a95fcc")
                        },
                        new
                        {
                            Id = new Guid("d3d1ab3c-8f74-4693-83b0-b1fe4847d27f"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6470),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("8ba3cc24-0ba2-49aa-b27b-4b36d3b0b830")
                        },
                        new
                        {
                            Id = new Guid("91d78c92-d27d-495e-95a2-4d0ab1ed8e83"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6471),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("a4726fae-db8f-4640-8e9e-b92613ce9313")
                        },
                        new
                        {
                            Id = new Guid("b81d4d80-14ad-4665-b5bd-526f5a30e0fd"),
                            AllowMultiple = false,
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6541),
                            IsRequired = true,
                            Name = "Boy Seçimi",
                            ProductId = new Guid("67cdabd3-e8af-4d4e-82ad-28f6c1f8ed64")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductOptionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductOptionGroupId");

                    b.ToTable("ProductOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a0553df-1d62-4ae0-bee1-bb35687b8a26"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6578),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("ae7f6c29-0733-49a9-9afa-5b383fd86c46")
                        },
                        new
                        {
                            Id = new Guid("f4f48afc-70c2-4eff-a990-42c9f06e0e02"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6580),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("ae7f6c29-0733-49a9-9afa-5b383fd86c46")
                        },
                        new
                        {
                            Id = new Guid("9864ef79-d827-43f6-98fa-ad4fc29a20f0"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6582),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("ae7f6c29-0733-49a9-9afa-5b383fd86c46")
                        },
                        new
                        {
                            Id = new Guid("f53b6d69-12e3-4c4e-97d3-7f4cbc7b5fa7"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6583),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("d3d1ab3c-8f74-4693-83b0-b1fe4847d27f")
                        },
                        new
                        {
                            Id = new Guid("ccf6b094-4adf-4c84-83c7-7f86811f0227"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6584),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("d3d1ab3c-8f74-4693-83b0-b1fe4847d27f")
                        },
                        new
                        {
                            Id = new Guid("d51291ed-9af7-4f8c-9a93-c7c0f285a84a"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6586),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("d3d1ab3c-8f74-4693-83b0-b1fe4847d27f")
                        },
                        new
                        {
                            Id = new Guid("ed0297a8-bee7-4f5b-a8ed-338a7362d267"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6588),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("91d78c92-d27d-495e-95a2-4d0ab1ed8e83")
                        },
                        new
                        {
                            Id = new Guid("a06ce83a-d94f-4837-9c96-7e8a98888324"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6589),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("91d78c92-d27d-495e-95a2-4d0ab1ed8e83")
                        },
                        new
                        {
                            Id = new Guid("bfcac1ad-0a14-4242-a92d-7b93b9804f6a"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6590),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("91d78c92-d27d-495e-95a2-4d0ab1ed8e83")
                        },
                        new
                        {
                            Id = new Guid("fe7da4e7-8c4d-4e81-b3b3-67096ba3ca3c"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6591),
                            Name = "Standart",
                            Price = 0m,
                            ProductOptionGroupId = new Guid("b81d4d80-14ad-4665-b5bd-526f5a30e0fd")
                        },
                        new
                        {
                            Id = new Guid("efd2c12a-b069-4bef-a389-64c7ea00221e"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6592),
                            Name = "Orta",
                            Price = 2m,
                            ProductOptionGroupId = new Guid("b81d4d80-14ad-4665-b5bd-526f5a30e0fd")
                        },
                        new
                        {
                            Id = new Guid("cba85f86-84c2-4ac1-bf83-3b9098c82ba2"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6593),
                            Name = "Büyük",
                            Price = 4m,
                            ProductOptionGroupId = new Guid("b81d4d80-14ad-4665-b5bd-526f5a30e0fd")
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("04f7281b-7032-4f16-b96a-336462a95fcc"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6425),
                            Deleted = false,
                            Name = "Latte",
                            Price = 15m
                        },
                        new
                        {
                            Id = new Guid("8ba3cc24-0ba2-49aa-b27b-4b36d3b0b830"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6427),
                            Deleted = false,
                            Name = "Mocha",
                            Price = 20m
                        },
                        new
                        {
                            Id = new Guid("67cdabd3-e8af-4d4e-82ad-28f6c1f8ed64"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6428),
                            Deleted = false,
                            Name = "Ice Americano",
                            Price = 10m
                        },
                        new
                        {
                            Id = new Guid("a4726fae-db8f-4640-8e9e-b92613ce9313"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(6429),
                            Deleted = false,
                            Name = "Ice Latte",
                            Price = 10m
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserVerificationTokens", (string)null);
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e1fe578-d637-48e3-85b9-aed06dceb7d3"),
                            CreatedOnUtc = new DateTime(2024, 9, 11, 23, 34, 45, 718, DateTimeKind.Utc).AddTicks(5948),
                            Deleted = false,
                            Email = "eneskrdnz28@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Enes",
                            LastName = "Karadeniz",
                            PasswordHash = "84EC87F0660FE72D18ABDFDDECE3EA6F0947E17CC31D9FD5118CBD42DF22086F-5BD03E4883FA460E2569473FAC6B5456",
                            PhoneNumberConfirmed = false
                        });
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.RolePermission", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.Authentication.UserRole", b =>
                {
                    b.HasOne("CofiApp.Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItemOptions.BasketItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.BasketItems.BasketItem", "BasketItem")
                        .WithMany("BasketItemOptions")
                        .HasForeignKey("BasketItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.ProductOptions.ProductOption", "ProductOption")
                        .WithMany()
                        .HasForeignKey("ProductOptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BasketItem");

                    b.Navigation("ProductOption");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Baskets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItemOptions.OrderItemOption", b =>
                {
                    b.HasOne("CofiApp.Domain.OrderItems.OrderItem", "OrderItem")
                        .WithMany("OrderItemOptions")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.HasOne("CofiApp.Domain.Orders.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.HasOne("CofiApp.Domain.Baskets.Basket", "Basket")
                        .WithMany("Orders")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductMenuCategories.ProductMenuCategory", b =>
                {
                    b.HasOne("CofiApp.Domain.MenuCategories.MenuCategory", "MenuCategory")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductMenuCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.HasOne("CofiApp.Domain.Products.Product", "Product")
                        .WithMany("ProductOptionGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptions.ProductOption", b =>
                {
                    b.HasOne("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", "ProductOptionGroup")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductOptionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductOptionGroup");
                });

            modelBuilder.Entity("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("CofiApp.Domain.UserRefreshTokens.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", b =>
                {
                    b.HasOne("CofiApp.Domain.Users.User", "User")
                        .WithOne("UserVerificationToken")
                        .HasForeignKey("CofiApp.Domain.UserVerificationTokens.UserVerificationToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CofiApp.Domain.BasketItems.BasketItem", b =>
                {
                    b.Navigation("BasketItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.Baskets.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CofiApp.Domain.MenuCategories.MenuCategory", b =>
                {
                    b.Navigation("ProductMenuCategories");
                });

            modelBuilder.Entity("CofiApp.Domain.OrderItems.OrderItem", b =>
                {
                    b.Navigation("OrderItemOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("CofiApp.Domain.ProductOptionGroups.ProductOptionGroup", b =>
                {
                    b.Navigation("ProductOptions");
                });

            modelBuilder.Entity("CofiApp.Domain.Products.Product", b =>
                {
                    b.Navigation("ProductMenuCategories");

                    b.Navigation("ProductOptionGroups");
                });

            modelBuilder.Entity("CofiApp.Domain.Users.User", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Orders");

                    b.Navigation("UserRefreshToken")
                        .IsRequired();

                    b.Navigation("UserVerificationToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
